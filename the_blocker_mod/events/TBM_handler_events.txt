### The Blocker Mod - Handler Events
#
# This file handles adding and removing non-natural features during gameplay.

namespace = tbm_handler

#1. Scripted Planets Handler
### Many scripted planets in vanilla call clear_blockers on init, or add vanilla deposits that will either be broken or unbalanced by the mod. This event is fired on_press_begin and checks for specific scripted planets. It may cause a slight lag when the game is first started.

event = {
	id = tbm_handler.1

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		
		
		### DISTANT STARS INITIALIZERS
		# primitive_robot_system
		# Standard spread
		every_system_planet = {
			limit = { has_planet_flag = primitive_robot_planet }
			reroll_deposits = yes
			add_deposit = d_failing_infrastructure
			add_deposit = d_failing_infrastructure
			add_deposit = d_city_ruins
			add_deposit = d_city_ruins
			add_deposit = d_metal_boneyard
		}

		# superflare_system
		# Standard spread for now, should get basic tomb features as well
		every_system_planet = {
			limit = { has_planet_flag = frozen_in_time_flag }
			reroll_deposits = yes
			add_deposit = d_radioactive_wasteland
			add_deposit = d_radioactive_wasteland
			add_deposit = d_irradiated_valley
		}

		# living_planet_system
		# Standard spread, will eventually do special set
		every_system_planet = {
			limit = { has_planet_flag = living_planet }
			reroll_deposits = yes
			add_deposit = d_betharian_deposit
		}

		### FALLEN EMPIRE WORLD### distant_stars_initializers
		# primitive_robot_system
		# Standard spread
		every_system_planet = {
			limit = { has_planet_flag = primitive_robot_planet }
			generate_start_deposits_and_blockers = yes
			add_deposit = d_failing_infrastructure
			add_deposit = d_failing_infrastructure
			add_deposit = d_city_ruins
			add_deposit = d_city_ruins
			add_deposit = d_metal_boneyard
		}

		# superflare_system
		# Standard spread for now, should get basic tomb features as well
		every_system_planet = {
			limit = { has_planet_flag = frozen_in_time_flag }
			generate_start_deposits_and_blockers = yes
			add_deposit = d_radioactive_wasteland
			add_deposit = d_radioactive_wasteland
			add_deposit = d_irradiated_valley
		}

		# living_planet_system
		# Standard spread, will eventually do special set
		every_system_planet = {
			limit = { has_planet_flag = living_planet }
			generate_start_deposits_and_blockers = yes
			add_deposit = d_betharian_deposit
		}

		

### Variables
@miners = 0
@mines = 0

	}
}

### 2. Advanced Start Feature Fixer
#	Advanced Start empires need to reroll features after vanilla init or else they'll have no features and will be crippled by unemployment. Called on_initialize_advanced_colony
planet_event = {
	id = tbm_handler.2

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		clear_blockers = yes
		clear_deposits = yes

		generate_start_deposits_and_blockers = yes	# Re-runs basic TBM feature init.
		fix_advanced_start_empire_features = yes
	}
}


### 4. Slum Handler (on_colony_yearly_pulse)
planet_event = {
	id = tbm_handler.4
	hide_window = yes

	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	# Several pre-reqs here that basically amount to crummy urban living; should be less common in late-game post-scarcity economies
	trigger = {
		owner = {
			any_owned_planet = {
			
				is_artificial = no
				
				# Got to have one each of sprawl and poor conditions
				OR = {
					free_amenities < 5
					free_housing > 5
					#planet_crime > 15
				}
				OR = {
					free_district_slots < 1
					num_districts = {
						type = district_city
						value >= 3
					}
				}	
			}
		}
	}

	immediate = {
		
		random_list = {
			# Slums generated, more likely if conditions are already bad.
			20 = {
				modifier = {
					factor = 2
					any_owned_pop = {
						has_low_living_standard_type = yes
					}
				}
				modifier = {
					factor = 2
					owner = {
						has_deficit = consumer_goods
					}
				}
				modifier = {
					factor = 2
					planet_resource_compare = {	# TEST performance hit on yearly pulse.
						resource = consumer_goods
						value < 2
					}
				}
				modifier = {	# Incentivize local food!
					factor = 2
					planet_resource_compare = {
						resource = food
						value < 0
					}
				}
				modifier = {
					factor = 2
					owner = {
						OR = {
							has_authority = auth_corporate
							has_authority = auth_oligarchic
						}
					}
				}
				modifier = {
					factor = 2
					any_owned_pop = {
						happiness < 20
					}
					any_owned_pop = {
						happiness < 20
					}
					any_owned_pop = {
						happiness < 20
					}
				}

				planet_event = {
					id = tbm_handler.5
				}
			}
			# No slums this time.
			80 = {
				modifier = {
					factor = 2
					owner = {
						OR = {
							has_civic = civic_idealistic_foundation
						}
					}
				}

			}
		}

	}
}

### 5. Slum Generator
planet_event = {
	id = tbm_handler.5
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		add_deposit = d_tbm_slums	# Gestalts need to get custom slums eventually.
		create_message = {
			type = "SLUM_GENERATOR"
			localization = SLUM_GENERATOR
			days = -1
			target = this
		}
	}
	
}

### 6. Industrial Wasteland Generator (on_colony_yearly_pulse)
planet_event = {
	id = tbm_handler.6
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			any_owned_planet = {
				is_artificial = no
	
				# Got to have one each of sprawl and poor business conditions
				OR = {
					free_amenities < 8
					planet_crime > 10
					any_owned_pop = {
						OR = {
							has_job = merchant
						}
					}
				}
				OR = {
					# Partly to punish highly-specialized planets of any kind, but okay as long as you don't stuff it.
					free_district_slots < 2
					OR = {
						num_districts = {
							type = district_industrial
							value >= 3
						}
						num_districts = {
							type = district_mining
							value >= 3
						}
						num_districts = {
							type = district_generator
							value >= 3
						}
					}
				}
			}
		}
	}

	immediate = {
		
		random_list = {
			# Wastelands generated, more likely with some other factors.
			50 = {
				modifier = {
					factor = 2
					owner = {
						OR = {
							has_authority = auth_corporate
							has_authority = auth_oligarchic
							has_authority = auth_dictatorial
						}
					}
				}
				modifier = {
					factor = 2
					root = {
						OR = {
							has_deficit = consumer_goods
							has_deficit = minerals
							has_deficit = energy
							has_deficit = alloys
						}
					}
				}
				modifier = {
					factor = 2
					planet_crime > 20
				}

				planet_event = {
					id = tbm_handler.7
					days = 180
					random = 90
				}
			}
			# No slums this time.
			50 = {

			}
		}

	}
}

### 7. Industrial Wasteland Generator
planet_event = {
	id = tbm_handler.7
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		add_deposit = d_tbm_industrial_wasteland
		create_message = {
			type = "INDUSTRIAL_WASTELAND"
			localization = INDUSTRIAL_WASTELAND
			days = -1
			target = this
		}
	}
}

### 8. Colonial Settlement Handler (on_colony_yearly_pulse, colony_age < 20)
planet_event = {
	id = tbm_handler.8

	hide_window = yes

	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
		is_occupied_flag = yes	# Occupying forces not so keen on new settlements as they are on new power plants
		is_homeworld = no
	}

	trigger = {
		has_building = building_capital 	# If too much, can change this to is_col_type = col_default for colony des only
		owner = { is_gestalt = no }
	}

	immediate = {
		random_list = {
			# Colonial Settlement - adds feature, housing, and colonist jobs.
			10 = {
				modifier = {
					factor = 5
					num_free_districts = {
						type = any
						value > 3
					}
				}
				modifier = {
					factor = 2
					num_pops > 8	# Should result in a few more settlements at that tight spot right before you get Planetary Admin.
				}

				# Reduce likelihood if we have settlements already, we don't want these getting weedy.
				modifier = {
					factor = 0.5
					count_deposits = {
						type = d_settlement
						count > 2
					}
				}
				modifier = {
					factor = 0.5
					count_deposits = {
						type = d_settlement
						count > 4
					}
				}

				 planet_event = {
				 	id = tbm_handler.9
				 	days = 180
					random = 90
				}
			}
			90 = {} 	# No settlement this year, busy having babies.
		}
	}
}

### 9. Colonial Settlement Generator
planet_event = {
	id = tbm_handler.9

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		add_deposit = d_settlement
		create_message = {
			type = "COLONIAL_SETTLEMENT"
			localization = COLONIAL_SETTLEMENT
			days = -1
			target = this
		}
	}
}

### 10. Frontier Farmland Handler (on_colony_yearly_pulse)
planet_event = {
	id = tbm_handler.10

	hide_window = yes
	is_triggered_only = yes

	pre_triggers = {
		is_homeworld = no
	}

	trigger = {
		owner = { is_gestalt = no }
	}

	immediate = {
		random_list = {
			10 = {
				modifier = {
					factor = 5
					num_free_districts = {
						type = any
						value > 5
					}
				}
				modifier = {
					factor = 2
					# Planets where the ranchin' is good
					OR = {
						is_dry = yes
						is_planet_class = pc_gaia
					}
				}
				modifier = {
					factor = 10
					owner = { has_valid_civic = civic_agrarian_idyll }
				}
				
				# Don't spawn rural farmsteads on worlds that are getting denser.
				modifier = {
					factor = 0.5
					num_pops > 20
				}
				modifier = {
					factor = 0
					OR = {
						has_building = building_major_capital
						num_pops > 40
					}
				}

				
			}
			
			90 = {}
		}
	}
}

### 11. Frontier Farmland Generator
planet_event = {
	id = tbm_handler.11

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		add_deposit = d_frontier_farmstead
		create_message = {
			type = "FRONTIER_FARMLAND"
			localization = "FRONTIER_FARMLAND"
			days = -1
			target = this
		}
	}
	
}

### 12. Mining Prospects Handler
planet_event = {
	id = tbm_handler.12

	is_triggered_only = yes
	hide_window = yes

	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
		is_occupied_flag = no
		is_homeworld = no
	}

	trigger = {
		colony_age < 100
		check_variable = {
			which = @prospecting_chance
			value < 3
		}
		NOT = { has_planet_flag = prospecting_cooldown }
	}

	immediate = {
		planet_event = {
			id = tbm.300
			days = 180
			random = 90
		}
	}

}

### 15. Dustbowl Handler (Overfarming Prototype) (on_colony_ten_year_pulse)
planet_event = {
	id = tbm_handler.15

	is_triggered_only = yes
	hide_window = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		colony_age > 40
		OR = {
			num_districts = {
				type = district_farming
				value > 3
			}
			num_districts = {
				type = any
				value > 7
			}
		}
		any_deposit = {
			is_farmland_feature = yes
			can_be_exhausted = yes
		}
	}

	immediate = {
		random_list = {
			50 = {
				planet_event = {
					id = tbm_handler.16
					days = 180
					random = 180
				}
			}
			50 = {}
		}
	}
}

### 16. Dustbowl Generator
planet_event = {
	id = tbm_handler.16

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				num_districts = {
					type = district_farming
					value > 0
				}
			}
			remove_district = district_farming	# Preference is to remove a farm, since it makes the most sense. In all likelihood, given the triggers, there will be at least one. If not, remove at random.
		}
		else = {
			remove_random_district = yes
		}

		random_deposit = {
			limit = {
				is_farmland_feature = yes
				can_be_exhausted = yes
			}
			remove_deposit = yes
		}

		add_deposit = d_dustbowl
		
		create_message = {
			type = "DUSTBOWL_GENERATOR"
			localization = message_dustbowl_generator
			days = 1
			target = this
		}
	}
}

### 17. Sinkhole Spawner
planet_event = {
	id = tbm_handler.17

	is_triggered_only = yes
	hide_window = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		OR = {		
			# Sinkholes make more sinkholes
			has_deposit = d_deep_sinkhole

			# But can also be called after you clear them.
			has_planet_flag = occasional_sinkholes
		}
		NOT = { owner = { has_country_flag = safe_from_sinkholes } }
	}

	immediate = {
		if = {
			limit = {
				has_planet_flag = sinkhole_causes
				NOT = { has_planet_flag = sinkhole_causes } # Prevents firing the event to give the project when you already have it.
			}
			planet_event = {
				id = tbm.82
				days = 360
				random = 180
			}
		}

		else = {
			random_list = {
				20 = {
					modifier = {
						factor = 1.5
						has_deposit = d_deep_sinkhole
					}
					modifier = {
						factor = 1.5
						count_deposits = {
							count > 1
							type = d_deep_sinkhole
						}
					}
					planet_event = {
						id = tbm.81
						days = 360
						random = 180
					}
				}
				80 = {}
			}
		}
	}

	after = {
		random_list = {
			40 = {
				set_planet_flag = sinkhole_causes 	# Getting tired of sinkholes, can investigate next time.
			}
			60 = {}
		}
	}
}

### 18. Mine-Shaft Manager
planet_event = {
	id = tbm_handler.18

	is_triggered_only = yes
	hide_window = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_mine_shafts = yes
		num_districts = {
			type = district_mining
			value > 1
		}
	}

	immediate = {
		
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = {
				job = miner
			}
			variable = @miners
		}

		random_list = {
			10 = {
				modifier = {
					add = @miners
				}
				modifier = {
					add = @mines
				}
				modifier = {
					factor = 1.15
					owner = {
						OR = {
							is_capitalist = yes
							is_industrialist = yes
						}
					}
				}

				random_deposit = {
					limit = {
						has_mine_shafts = yes
					}
					save_event_target_as = collapsed_mine
				}
				planet_event = {
					id = tbm.90
					days = 60
					random = 15
				}
			}
			90 = {}
		}
	}
}

### 19. Mine-Shaft Collapser
planet_event = {
	id = tbm_handler.19

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		
		hidden_effect = {
			set_variable_to_random_value = {
				which = @casualty_chance
				min = 1
				max = 100
			}
		}

		### Damage
		add_planet_devastation = 10
		event_target:collapsed_mine = {
			remove_deposit = yes
		}
		
		### Casualties
		if = {
			limit = {
				check_variable = {
					which = @casualty_chance
					value > 50
				}
			}
			if = {
				limit = {
					owner = {
						OR = {
							has_policy_flag = ai_servitude
							is_gestalt = yes
						}
					}
					count_owned_pops = {
						has_job = miner
						is_robotic_species = yes
						count >= 2
					}
				}
				random_owned_pop = {
					limit = {
						has_job = miner
						OR = {
							AND = {
								is_robotic_species = yes
								owner = { is_gestalt = no }
							}
							owner = { is_gestalt = yes }
						}
					}
					kill_pop = yes
					kill_pop = yes
				}

				create_message = {
					type = "MINE_SHAFT_COLLAPSE"
					localization = tbm_message_mine_shaft_collapse_robot_casaulties
					days = -1
				}
			}
			else = {
				random_owned_pop = {
					limit = {
						has_job = miner
					}
					kill_pop = yes
					kill_pop = yes
				}

				add_modifier = {
					modifier = miners_strike
					days = 720
				}

				create_message = {
					type = "MINE_SHAFT_COLLAPSE"
					localization = tbm_message_mine_shaft_collapse_miners_dead
					days = -1
				}
			}
		}
		else = {
			create_message = {
				type = "MINE_SHAFT_COLLAPSE"
				localization = tbm_message_mine_shaft_collapse_no_casaulties
				days = -1
			}
		}
	}
}

### 20. False Prospects Handler (on_district_complete)
#	For event, see TBM_02_events.txt
planet_event = {
	id = tbm_handler.20

	is_triggered_only = yes
	hide_window = yes

	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
		is_occupied_flag = no
	}

	trigger = {
		is_artificial = no
		NOT = { has_planet_flag = mining_bust } 	# Helps avoid over-firing whenc onstructing a lot of districts.
		last_district_changed = district_mining
		any_deposit = {
			has_mineral_seam = yes
		}
		num_districts = {
			type = district_mining
			value > 0
		}
	}

	immediate = {
		random_list = {
			20 = {
				
				# More likely on planets with lots of miners, all trying to strike it gold
				modifier = {
					factor = 1.5
					num_assigned_jobs = {
						job = miner
						value > 2
					}
				}
				modifier = {
					factor = 1.5
					num_assigned_jobs = {
						job = miner
						value > 4
					}
				}

				planet_event = {
					id = tbm.89
					days = 720
					random = 180
				}
		
				set_timed_planet_flag = {
					flag = mining_bust
					years = 10	# Takes a good while for people to forget
				}
			}
			80 = {}
		}
	}
}




### 11. Reroll tomb features on nuking via various events (on-action: )

### 100. Colonization Handler
#	on_colonized
#	This exists mainly to get Pioneering Colonists out of the way of the First X Colony event, as well as tutorial events.
planet_event = {
	id = tbm_handler.100

	hide_window = yes
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		num_free_districts = {
			type = district_city
			value < 0
		}
	}

	immediate = {
		this = {
			planet_event = {
				id = tbm_handler.101
				days = 10
				random = 5
			}
		}
	}

}

### 101. Pioneering Colonists
#	Exists to help with clarity and difficulty when colonizing very inhospitable worlds.
#	Might be a good idea to make sure you pay those colonists back for their hard work, though....
planet_event = {
	id = tbm_handler.101

	title = tbm_handler.101.name
	desc = tbm_handler.101.desc
	picture = GFX_evt_alien_planet
	show_sound = event_default

	is_triggered_only = yes

	immediate = {
		add_modifier = {
			modifier = pioneering_colonists
			years = 20
		}
		
		if = {
			limit = {
				owner = {
					num_owned_planets < 3	# 3 because this is called after you own the colony. No luck for habitat starts, you already know a thing or two about colonization.
				}
			}
			add_modifier = {
				modifier = terra_incognita
				years = 20
			}
		}
		else = {
			add_modifier = {
				modifier = new_frontier
				years = 20
			}
		}

		# Currently, this does nothing. But one day.... (it will help with balance, too).
		set_timed_planet_flag = {
			flag = pioneer_planet
			years = 50
		}
	}

	option = {
		name = tbm_handler.101.option	# This should really be something cooler.
	}
}

### 102. Wild World Generator (on_press_begin)
#	The long-term plan is that these shouldn't need to exist. Until then, they're added on_press_begin to provid flavor to and help ameliorate particularly nasty feature spawns, with the idea being to avoid planets with large numbers of negative district space because it confuses the UI.
planet_event = {
	id = tbm_handler.102

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		every_galaxy_planet = {
			limit = {
				habitable_planet = yes
				num_free_districts = {
					type = district_city
					value < -3
				}
			}
			add_modifier = {
				modifier = wild_world
			}
		}
	}
}

### 103. Wild World Remover (on_yearly_pulse)
#	Removes the Wild World modifier when the planet has developed enough not to be one anymore.
planet_event = {
	id = tbm_handler.103

	is_triggered_only = yes
	hide_window = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = wild_world
		colony_age > 20
		num_free_districts = {
			type = district_city
			value >= 0
		}
	}

	immediate = {
		remove_modifier = wild_world
	}
}
